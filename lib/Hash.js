// Generated by CoffeeScript 1.6.3
(function() {
  var Hash, check, comparator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  check = require('check-types');

  comparator = require('./comparator');

  Hash = (function() {
    Hash.RESERVED_KEY_NAMES = ['setKeys', 'reset', 'remove', 'getData', 'keys'];

    Hash.comparator = comparator;

    function Hash(keys, comparator) {
      var _this = this;
      if (keys == null) {
        keys = [];
      }
      if (typeof comparator !== 'function') {
        throw new TypeError('Invalid comparator');
      }
      this._store = {};
      this.setKeys(keys);
      this._comparator = comparator;
      Object.defineProperty(this, 'length', {
        get: function() {
          return Object.keys(_this._store).length;
        }
      });
    }

    Hash.prototype.setKeys = function(keys) {
      var _this = this;
      if (!Array.isArray(keys)) {
        throw new TypeError('keys must be type array');
      }
      return keys.forEach(function(key) {
        if (typeof key !== 'string') {
          throw new TypeError('Invalid key');
        }
        if (__indexOf.call(Hash.RESERVED_KEY_NAMES, key) >= 0) {
          throw new TypeError("`" + key + "` is already defined");
        }
        return Object.defineProperty(Hash.prototype, key, {
          get: function() {
            return _this._store[key] || null;
          },
          set: function(value) {
            if (!_this._comparator(value)) {
              throw new TypeError('Invalid type of member');
            }
            return _this._store[key] = value;
          },
          enumerable: true,
          configurable: true
        });
      });
    };

    Hash.prototype.reset = function() {
      return this._store = {};
    };

    Hash.prototype.remove = function(key) {
      var value;
      if (!(typeof key === 'string') || key === '') {
        throw new TypeError('Invalid key');
      }
      if (this._store[key] == null) {
        return false;
      }
      value = this._store[key];
      this._store[key] = void 0;
      return value;
    };

    Hash.prototype.getData = function() {
      return this._store;
    };

    Hash.prototype.keys = function() {
      return Object.keys(this._store);
    };

    Hash.prototype.marshall = function(marshallFunction) {
      var data,
        _this = this;
      if (marshallFunction == null) {
        marshallFunction = function(v) {
          return v;
        };
      }
      if (typeof marshallFunction !== 'function') {
        throw new TypeError('Invalid marshall function');
      }
      data = {};
      this.keys().forEach(function(k) {
        return data[k] = marshallFunction(_this._store[k]);
      });
      return data;
    };

    return Hash;

  })();

  Hash.unmarshall = function(dataHash, comparator, unmarshallFunction) {
    var hash,
      _this = this;
    if (unmarshallFunction == null) {
      unmarshallFunction = function(v) {
        return v;
      };
    }
    if (!check.object(dataHash)) {
      throw new TypeError('Invalid dataHash');
    }
    if (typeof unmarshallFunction !== 'function') {
      throw new TypeError('Invalid unmarshall function');
    }
    hash = new Hash(Object.keys(dataHash), comparator);
    if ((dataHash != null) && check.object(dataHash)) {
      Object.keys(dataHash).forEach(function(k) {
        return hash[k] = unmarshallFunction(dataHash[k]);
      });
    }
    return hash;
  };

  module.exports = Hash;

}).call(this);
