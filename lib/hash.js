// Generated by CoffeeScript 1.6.3
(function() {
  var Hash;

  Hash = (function() {
    function Hash(prototype, keys) {
      if (keys == null) {
        keys = [];
      }
      if (typeof prototype !== 'function') {
        throw new TypeError('Invalid prototype');
      }
      this._proto = prototype;
      this._store = {};
      this.setKeys(keys);
    }

    Hash.prototype.setKeys = function(keys) {
      var _this = this;
      if (!Array.isArray(keys)) {
        throw new TypeError('keys must be type array');
      }
      return keys.map(function(key) {
        if (typeof key !== 'string') {
          throw new TypeError('Invalid key');
        }
        return Object.defineProperty(_this, key, {
          get: function() {
            return _this._store[key] || null;
          },
          set: function(value) {
            if (!(value instanceof _this._proto)) {
              throw new TypeError('Invalid member value');
            }
            return _this._store[key] = value;
          },
          enumerable: true,
          configurable: true
        });
      });
    };

    Hash.prototype.reset = function() {
      return this._store = {};
    };

    Hash.prototype.remove = function(key) {
      var value;
      if (!(typeof key === 'string') || key === '') {
        throw new TypeError('Invalid key');
      }
      if (this._store[key] == null) {
        return false;
      }
      value = this._store[key];
      this._store[key] = void 0;
      return value;
    };

    Hash.prototype.length = function() {
      return Object.keys(this._store).length;
    };

    Hash.prototype.getData = function() {
      return this._store;
    };

    Hash.prototype.getKeys = function() {
      return Object.keys(this._store);
    };

    return Hash;

  })();

  module.exports = Hash;

}).call(this);
