// Generated by CoffeeScript 1.6.3
(function() {
  var Hash;

  Hash = (function() {
    function Hash(prototype, keys) {
      if (keys == null) {
        keys = [];
      }
      if (typeof prototype !== 'function') {
        throw new TypeError('Invalid prototype');
      }
      this._proto = prototype;
      this._keys = [];
      this.setKeys(keys);
      this.reset();
    }

    Hash.prototype.setKeys = function(keys) {
      var key, _i, _len, _results,
        _this = this;
      if (!Array.isArray(keys)) {
        throw new TypeError('keys must be type array');
      }
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (typeof key === 'string') {
          this._keys.push(key);
          this.__defineGetter__(key, function() {
            return _this.key || null;
          });
          _results.push(this.__defineSetter__(key, function(value) {
            if (!(value instanceof _this._proto)) {
              throw new TypeError('Invalid member value');
            }
            return _this.key = value;
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Hash.prototype.reset = function() {
      var key, _i, _len, _ref, _results;
      _ref = this._keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(this.key = void 0);
      }
      return _results;
    };

    Hash.prototype.remove = function(key) {
      var value;
      if (!(typeof key === 'string') || key === '') {
        throw new TypeError('Invalid key');
      }
      if (this.key == null) {
        return false;
      }
      value = this.key;
      this.key = void 0;
      return value;
    };

    Hash.prototype.length = function() {
      return this._keys.length;
    };

    Hash.prototype.getData = function() {
      var data, key, _i, _len, _ref;
      data = {};
      _ref = this._keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        data[key] = this.key;
      }
      return data;
    };

    Hash.prototype.getKeys = function() {
      return this._keys;
    };

    return Hash;

  })();

  module.exports = Hash;

}).call(this);
